import requests
from sendgrid import SendGridAPIClient
from sendgrid.helpers.mail import Mail
from datetime import datetime
import time
import sys
import os
from dotenv import load_dotenv
import logging

# T·∫£i bi·∫øn m√¥i tr∆∞·ªùng t·ª´ file .env
load_dotenv()

# C·∫•u h√¨nh th√¥ng tin t·ª´ bi·∫øn m√¥i tr∆∞·ªùng
WEBSITE_URL = os.getenv('WEBSITE_URL', 'https://shalom.vn/')
EMAIL_SENDER = os.getenv('EMAIL_SENDER', 'website_monitor@cms.neko-it.site')
EMAIL_RECEIVER = os.getenv('EMAIL_RECEIVER', 'nhannt200823@gmail.com')
SENDGRID_API_KEY = os.getenv('SENDGRID_API_KEY')
CHECK_INTERVAL = int(os.getenv('CHECK_INTERVAL', '3600'))

# Ki·ªÉm tra xem API key c√≥ ƒë∆∞·ª£c cung c·∫•p kh√¥ng
if not SENDGRID_API_KEY:
    print(f"[{datetime.now()}] L·ªói: SENDGRID_API_KEY kh√¥ng ƒë∆∞·ª£c t√¨m th·∫•y trong bi·∫øn m√¥i tr∆∞·ªùng", file=sys.stderr)
    sys.exit(1)

# ƒê·ªãnh nghƒ©a c√°c m·ª©c ƒë·ªô l·ªói


class ErrorLevel:
    INFO = "INFO"
    WARNING = "WARNING"
    ERROR = "ERROR"
    CRITICAL = "CRITICAL"


last_status = None
error_count = 0  # ƒê·∫øm s·ªë l·∫ßn l·ªói li√™n ti·∫øp


def classify_error(status_code=None, exception=None):
    """
    Ph√¢n lo·∫°i m·ª©c ƒë·ªô l·ªói d·ª±a tr√™n status code ho·∫∑c exception
    """
    if exception:
        # Ph√¢n lo·∫°i theo lo·∫°i exception
        if isinstance(exception, requests.exceptions.Timeout):
            return ErrorLevel.WARNING, f"Timeout: Kh√¥ng th·ªÉ k·∫øt n·ªëi trong 30 gi√¢y - {str(exception)}"
        elif isinstance(exception, requests.exceptions.ConnectionError):
            return ErrorLevel.ERROR, f"Connection Error: Kh√¥ng th·ªÉ k·∫øt n·ªëi t·ªõi server - {str(exception)}"
        elif isinstance(exception, requests.exceptions.HTTPError):
            return ErrorLevel.ERROR, f"HTTP Error: L·ªói HTTP - {str(exception)}"
        elif isinstance(exception, requests.exceptions.RequestException):
            return ErrorLevel.WARNING, f"Request Exception: {str(exception)}"
        else:
            return ErrorLevel.ERROR, f"Unknown Exception: {str(exception)}"

    if status_code:
        # Ph√¢n lo·∫°i theo HTTP status code
        if 200 <= status_code < 300:
            return ErrorLevel.INFO, f"Website ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng (Status: {status_code})"
        elif 300 <= status_code < 400:
            return ErrorLevel.WARNING, f"Redirect: Website chuy·ªÉn h∆∞·ªõng (Status: {status_code})"
        elif status_code == 404:
            return ErrorLevel.WARNING, f"Page Not Found: Trang kh√¥ng t·ªìn t·∫°i (Status: {status_code})"
        elif 400 <= status_code < 500:
            return ErrorLevel.ERROR, f"Client Error: L·ªói ph√≠a client (Status: {status_code})"
        elif 500 <= status_code < 600:
            return ErrorLevel.CRITICAL, f"Server Error: L·ªói ph√≠a server (Status: {status_code})"
        else:
            return ErrorLevel.WARNING, f"Unknown Status Code: {status_code}"

    return ErrorLevel.ERROR, "Unknown error occurred"


def should_send_email(error_level):
    """
    Quy·∫øt ƒë·ªãnh c√≥ n√™n g·ª≠i email hay kh√¥ng d·ª±a tr√™n m·ª©c ƒë·ªô l·ªói
    """
    return error_level in [ErrorLevel.WARNING, ErrorLevel.ERROR, ErrorLevel.CRITICAL]


def send_email(subject, body):
    try:
        message = Mail(
            from_email=EMAIL_SENDER,
            to_emails=EMAIL_RECEIVER,
            subject=subject,
            plain_text_content=body)
        sg = SendGridAPIClient(SENDGRID_API_KEY)
        response = sg.send(message)
        print(
            f"[{datetime.now()}] G·ª≠i Email th√†nh c√¥ng: {subject} (Status: {response.status_code})")
        return True
    except Exception as e:
        print(f"[{datetime.now()}] L·ªói khi g·ª≠i email: {e}", file=sys.stderr)
        return False


def check_website():
    """
    Ki·ªÉm tra website v√† tr·∫£ v·ªÅ th√¥ng tin chi ti·∫øt v·ªÅ tr·∫°ng th√°i
    """
    global error_count

    try:
        print(f"[{datetime.now()}] Ki·ªÉm tra website {WEBSITE_URL}")
        response = requests.get(WEBSITE_URL, timeout=30)

        error_level, message = classify_error(status_code=response.status_code)

        if error_level == ErrorLevel.INFO:
            print(f"[{datetime.now()}] {error_level}: {message}")
            error_count = 0  # Reset counter khi website ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng
            return True, error_level, message
        else:
            print(f"[{datetime.now()}] {error_level}: {message}")
            error_count += 1
            return False, error_level, message

    except requests.exceptions.RequestException as e:
        error_level, message = classify_error(exception=e)
        print(f"[{datetime.now()}] {error_level}: {message}", file=sys.stderr)
        error_count += 1
        return False, error_level, message


def format_email_body(error_level, message, error_count):
    """
    T·∫°o n·ªôi dung email chi ti·∫øt
    """
    body = f"""
C·∫£nh b√°o t·ª´ h·ªá th·ªëng gi√°m s√°t website:

Th·ªùi gian: {datetime.now()}
M·ª©c ƒë·ªô l·ªói: {error_level}
Chi ti·∫øt l·ªói: {message}
S·ªë l·∫ßn l·ªói li√™n ti·∫øp: {error_count}
---
Th√¥ng tin b·ªï sung:
- Script s·∫Ω ti·∫øp t·ª•c ki·ªÉm tra m·ªói {CHECK_INTERVAL} gi√¢y
- Email ƒë∆∞·ª£c g·ª≠i khi c√≥ l·ªói m·ª©c WARNING, ERROR ho·∫∑c CRITICAL
- C·∫ßn ki·ªÉm tra ngay l·∫≠p t·ª©c n·∫øu ƒë√¢y l√† l·ªói CRITICAL
- Vui l√≤ng ki·ªÉm tra website v√† server c·ªßa b·∫°n.
    """
    return body.strip()


if __name__ == "__main__":
    last_status = None
    error_count = 0
    print(f"[{datetime.now()}] B·∫Øt ƒë·∫ßu gi√°m s√°t website {WEBSITE_URL}")
    print(f"[{datetime.now()}] Ki·ªÉm tra m·ªói {CHECK_INTERVAL} gi√¢y")
    print(
        f"[{datetime.now()}] Email ƒë∆∞·ª£c g·ª≠i khi c√≥ l·ªói m·ª©c WARNING, ERROR ho·∫∑c CRITICAL")

    while True:
        try:
            is_up, error_level, message = check_website()

            if is_up:
                # Website ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng
                if last_status is not None and not last_status:
                    # Website t·ª´ DOWN chuy·ªÉn sang UP
                    subject = f"‚úÖ Website {WEBSITE_URL} is BACK UP"
                    body = format_email_body(
                        ErrorLevel.INFO, "Website ƒë√£ ho·∫°t ƒë·ªông tr·ªü l·∫°i", 0)
                    send_email(subject, body)
                    print(
                        f"[{datetime.now()}] Website ƒë√£ ph·ª•c h·ªìi - ƒë√£ g·ª≠i email th√¥ng b√°o")
                else:
                    print(
                        f"[{datetime.now()}] Website v·∫´n ƒëang ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng - kh√¥ng g·ª≠i email")
            else:
                # Website c√≥ v·∫•n ƒë·ªÅ
                if should_send_email(error_level):
                    # G·ª≠i email cho WARNING, ERROR ho·∫∑c CRITICAL
                    if error_level == ErrorLevel.CRITICAL:
                        subject = f"üî¥ CRITICAL - Website {WEBSITE_URL} is DOWN"
                    elif error_level == ErrorLevel.ERROR:
                        subject = f"‚ö†Ô∏è ERROR - Website {WEBSITE_URL} has issues"
                    else:  # WARNING
                        subject = f"‚ö†Ô∏è WARNING - Website {WEBSITE_URL} has issues"

                    body = format_email_body(error_level, message, error_count)

                    # G·ª≠i email ngay l·∫≠p t·ª©c cho l·ªói CRITICAL, ho·∫∑c sau 2 l·∫ßn l·ªói WARNING/ERROR li√™n ti·∫øp
                    if error_level == ErrorLevel.CRITICAL or error_count >= 2:
                        send_email(subject, body)
                        print(
                            f"[{datetime.now()}] ƒê√£ g·ª≠i email c·∫£nh b√°o: {error_level}")
                    else:
                        print(
                            f"[{datetime.now()}] L·ªói {error_level} - ch∆∞a g·ª≠i email (l·∫ßn {error_count}/2)")
                else:
                    # INFO level - ch·ªâ log, kh√¥ng g·ª≠i email
                    print(
                        f"[{datetime.now()}] {error_level}: {message} - kh√¥ng g·ª≠i email")

            last_status = is_up
            print(
                f"[{datetime.now()}] ƒê·ª£i {CHECK_INTERVAL} gi√¢y tr∆∞·ªõc khi ki·ªÉm tra ti·∫øp")
            time.sleep(CHECK_INTERVAL)

        except KeyboardInterrupt:
            print(f"[{datetime.now()}] Script d·ª´ng b·ªüi ng∆∞·ªùi d√πng")
            sys.exit(0)
        except Exception as e:
            print(
                f"[{datetime.now()}] L·ªói kh√¥ng x√°c ƒë·ªãnh trong v√≤ng l·∫∑p ch√≠nh: {e}", file=sys.stderr)
            time.sleep(CHECK_INTERVAL)
